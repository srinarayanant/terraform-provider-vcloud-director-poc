# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pyvcloudprovider.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='pyvcloudprovider.proto',
  package='pyvcloudprovider',
  syntax='proto3',
  serialized_pb=_b('\n\x16pyvcloudprovider.proto\x12\x10pyvcloudprovider\"P\n\x11TenantCredentials\x12\x10\n\x08username\x18\x01 \x01(\t\x12\x10\n\x08password\x18\x02 \x01(\t\x12\x0b\n\x03org\x18\x03 \x01(\t\x12\n\n\x02ip\x18\x04 \x01(\t\"\x1c\n\x0bLoginResult\x12\r\n\x05token\x18\x01 \x01(\t\"<\n\x07\x43\x61talog\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x0e\n\x06shared\x18\x03 \x01(\x08\")\n\x16IsPresentCatalogResult\x12\x0f\n\x07present\x18\x01 \x01(\x08\"&\n\x13\x43reateCatalogResult\x12\x0f\n\x07\x63reated\x18\x01 \x01(\x08\"&\n\x13\x44\x65leteCatalogResult\x12\x0f\n\x07\x64\x65leted\x18\x01 \x01(\x08\x32\xe6\x02\n\x10PyVcloudProvider\x12M\n\x05Login\x12#.pyvcloudprovider.TenantCredentials\x1a\x1d.pyvcloudprovider.LoginResult\"\x00\x12Y\n\x10isPresentCatalog\x12\x19.pyvcloudprovider.Catalog\x1a(.pyvcloudprovider.IsPresentCatalogResult\"\x00\x12S\n\rCreateCatalog\x12\x19.pyvcloudprovider.Catalog\x1a%.pyvcloudprovider.CreateCatalogResult\"\x00\x12S\n\rDeleteCatalog\x12\x19.pyvcloudprovider.Catalog\x1a%.pyvcloudprovider.DeleteCatalogResult\"\x00\x42\x37\n\x1c\x63om.vmware.pyvcloud.providerB\x15PyVcloudProviderProtoP\x01\x62\x06proto3')
)




_TENANTCREDENTIALS = _descriptor.Descriptor(
  name='TenantCredentials',
  full_name='pyvcloudprovider.TenantCredentials',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='pyvcloudprovider.TenantCredentials.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='password', full_name='pyvcloudprovider.TenantCredentials.password', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='org', full_name='pyvcloudprovider.TenantCredentials.org', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ip', full_name='pyvcloudprovider.TenantCredentials.ip', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=44,
  serialized_end=124,
)


_LOGINRESULT = _descriptor.Descriptor(
  name='LoginResult',
  full_name='pyvcloudprovider.LoginResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='token', full_name='pyvcloudprovider.LoginResult.token', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=126,
  serialized_end=154,
)


_CATALOG = _descriptor.Descriptor(
  name='Catalog',
  full_name='pyvcloudprovider.Catalog',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='pyvcloudprovider.Catalog.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='pyvcloudprovider.Catalog.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='shared', full_name='pyvcloudprovider.Catalog.shared', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=156,
  serialized_end=216,
)


_ISPRESENTCATALOGRESULT = _descriptor.Descriptor(
  name='IsPresentCatalogResult',
  full_name='pyvcloudprovider.IsPresentCatalogResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='present', full_name='pyvcloudprovider.IsPresentCatalogResult.present', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=218,
  serialized_end=259,
)


_CREATECATALOGRESULT = _descriptor.Descriptor(
  name='CreateCatalogResult',
  full_name='pyvcloudprovider.CreateCatalogResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='created', full_name='pyvcloudprovider.CreateCatalogResult.created', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=261,
  serialized_end=299,
)


_DELETECATALOGRESULT = _descriptor.Descriptor(
  name='DeleteCatalogResult',
  full_name='pyvcloudprovider.DeleteCatalogResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='deleted', full_name='pyvcloudprovider.DeleteCatalogResult.deleted', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=301,
  serialized_end=339,
)

DESCRIPTOR.message_types_by_name['TenantCredentials'] = _TENANTCREDENTIALS
DESCRIPTOR.message_types_by_name['LoginResult'] = _LOGINRESULT
DESCRIPTOR.message_types_by_name['Catalog'] = _CATALOG
DESCRIPTOR.message_types_by_name['IsPresentCatalogResult'] = _ISPRESENTCATALOGRESULT
DESCRIPTOR.message_types_by_name['CreateCatalogResult'] = _CREATECATALOGRESULT
DESCRIPTOR.message_types_by_name['DeleteCatalogResult'] = _DELETECATALOGRESULT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

TenantCredentials = _reflection.GeneratedProtocolMessageType('TenantCredentials', (_message.Message,), dict(
  DESCRIPTOR = _TENANTCREDENTIALS,
  __module__ = 'pyvcloudprovider_pb2'
  # @@protoc_insertion_point(class_scope:pyvcloudprovider.TenantCredentials)
  ))
_sym_db.RegisterMessage(TenantCredentials)

LoginResult = _reflection.GeneratedProtocolMessageType('LoginResult', (_message.Message,), dict(
  DESCRIPTOR = _LOGINRESULT,
  __module__ = 'pyvcloudprovider_pb2'
  # @@protoc_insertion_point(class_scope:pyvcloudprovider.LoginResult)
  ))
_sym_db.RegisterMessage(LoginResult)

Catalog = _reflection.GeneratedProtocolMessageType('Catalog', (_message.Message,), dict(
  DESCRIPTOR = _CATALOG,
  __module__ = 'pyvcloudprovider_pb2'
  # @@protoc_insertion_point(class_scope:pyvcloudprovider.Catalog)
  ))
_sym_db.RegisterMessage(Catalog)

IsPresentCatalogResult = _reflection.GeneratedProtocolMessageType('IsPresentCatalogResult', (_message.Message,), dict(
  DESCRIPTOR = _ISPRESENTCATALOGRESULT,
  __module__ = 'pyvcloudprovider_pb2'
  # @@protoc_insertion_point(class_scope:pyvcloudprovider.IsPresentCatalogResult)
  ))
_sym_db.RegisterMessage(IsPresentCatalogResult)

CreateCatalogResult = _reflection.GeneratedProtocolMessageType('CreateCatalogResult', (_message.Message,), dict(
  DESCRIPTOR = _CREATECATALOGRESULT,
  __module__ = 'pyvcloudprovider_pb2'
  # @@protoc_insertion_point(class_scope:pyvcloudprovider.CreateCatalogResult)
  ))
_sym_db.RegisterMessage(CreateCatalogResult)

DeleteCatalogResult = _reflection.GeneratedProtocolMessageType('DeleteCatalogResult', (_message.Message,), dict(
  DESCRIPTOR = _DELETECATALOGRESULT,
  __module__ = 'pyvcloudprovider_pb2'
  # @@protoc_insertion_point(class_scope:pyvcloudprovider.DeleteCatalogResult)
  ))
_sym_db.RegisterMessage(DeleteCatalogResult)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\034com.vmware.pyvcloud.providerB\025PyVcloudProviderProtoP\001'))

_PYVCLOUDPROVIDER = _descriptor.ServiceDescriptor(
  name='PyVcloudProvider',
  full_name='pyvcloudprovider.PyVcloudProvider',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=342,
  serialized_end=700,
  methods=[
  _descriptor.MethodDescriptor(
    name='Login',
    full_name='pyvcloudprovider.PyVcloudProvider.Login',
    index=0,
    containing_service=None,
    input_type=_TENANTCREDENTIALS,
    output_type=_LOGINRESULT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='isPresentCatalog',
    full_name='pyvcloudprovider.PyVcloudProvider.isPresentCatalog',
    index=1,
    containing_service=None,
    input_type=_CATALOG,
    output_type=_ISPRESENTCATALOGRESULT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='CreateCatalog',
    full_name='pyvcloudprovider.PyVcloudProvider.CreateCatalog',
    index=2,
    containing_service=None,
    input_type=_CATALOG,
    output_type=_CREATECATALOGRESULT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='DeleteCatalog',
    full_name='pyvcloudprovider.PyVcloudProvider.DeleteCatalog',
    index=3,
    containing_service=None,
    input_type=_CATALOG,
    output_type=_DELETECATALOGRESULT,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_PYVCLOUDPROVIDER)

DESCRIPTOR.services_by_name['PyVcloudProvider'] = _PYVCLOUDPROVIDER

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PyVcloudProviderStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Login = channel.unary_unary(
          '/pyvcloudprovider.PyVcloudProvider/Login',
          request_serializer=TenantCredentials.SerializeToString,
          response_deserializer=LoginResult.FromString,
          )
      self.isPresentCatalog = channel.unary_unary(
          '/pyvcloudprovider.PyVcloudProvider/isPresentCatalog',
          request_serializer=Catalog.SerializeToString,
          response_deserializer=IsPresentCatalogResult.FromString,
          )
      self.CreateCatalog = channel.unary_unary(
          '/pyvcloudprovider.PyVcloudProvider/CreateCatalog',
          request_serializer=Catalog.SerializeToString,
          response_deserializer=CreateCatalogResult.FromString,
          )
      self.DeleteCatalog = channel.unary_unary(
          '/pyvcloudprovider.PyVcloudProvider/DeleteCatalog',
          request_serializer=Catalog.SerializeToString,
          response_deserializer=DeleteCatalogResult.FromString,
          )


  class PyVcloudProviderServicer(object):
    """Interface exported by the server.
    """

    def Login(self, request, context):
      """Tenant Loging to VCD  
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def isPresentCatalog(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreateCatalog(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteCatalog(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PyVcloudProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Login': grpc.unary_unary_rpc_method_handler(
            servicer.Login,
            request_deserializer=TenantCredentials.FromString,
            response_serializer=LoginResult.SerializeToString,
        ),
        'isPresentCatalog': grpc.unary_unary_rpc_method_handler(
            servicer.isPresentCatalog,
            request_deserializer=Catalog.FromString,
            response_serializer=IsPresentCatalogResult.SerializeToString,
        ),
        'CreateCatalog': grpc.unary_unary_rpc_method_handler(
            servicer.CreateCatalog,
            request_deserializer=Catalog.FromString,
            response_serializer=CreateCatalogResult.SerializeToString,
        ),
        'DeleteCatalog': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteCatalog,
            request_deserializer=Catalog.FromString,
            response_serializer=DeleteCatalogResult.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'pyvcloudprovider.PyVcloudProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPyVcloudProviderServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Interface exported by the server.
    """
    def Login(self, request, context):
      """Tenant Loging to VCD  
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def isPresentCatalog(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreateCatalog(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteCatalog(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPyVcloudProviderStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Interface exported by the server.
    """
    def Login(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Tenant Loging to VCD  
      """
      raise NotImplementedError()
    Login.future = None
    def isPresentCatalog(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    isPresentCatalog.future = None
    def CreateCatalog(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    CreateCatalog.future = None
    def DeleteCatalog(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    DeleteCatalog.future = None


  def beta_create_PyVcloudProvider_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('pyvcloudprovider.PyVcloudProvider', 'CreateCatalog'): Catalog.FromString,
      ('pyvcloudprovider.PyVcloudProvider', 'DeleteCatalog'): Catalog.FromString,
      ('pyvcloudprovider.PyVcloudProvider', 'Login'): TenantCredentials.FromString,
      ('pyvcloudprovider.PyVcloudProvider', 'isPresentCatalog'): Catalog.FromString,
    }
    response_serializers = {
      ('pyvcloudprovider.PyVcloudProvider', 'CreateCatalog'): CreateCatalogResult.SerializeToString,
      ('pyvcloudprovider.PyVcloudProvider', 'DeleteCatalog'): DeleteCatalogResult.SerializeToString,
      ('pyvcloudprovider.PyVcloudProvider', 'Login'): LoginResult.SerializeToString,
      ('pyvcloudprovider.PyVcloudProvider', 'isPresentCatalog'): IsPresentCatalogResult.SerializeToString,
    }
    method_implementations = {
      ('pyvcloudprovider.PyVcloudProvider', 'CreateCatalog'): face_utilities.unary_unary_inline(servicer.CreateCatalog),
      ('pyvcloudprovider.PyVcloudProvider', 'DeleteCatalog'): face_utilities.unary_unary_inline(servicer.DeleteCatalog),
      ('pyvcloudprovider.PyVcloudProvider', 'Login'): face_utilities.unary_unary_inline(servicer.Login),
      ('pyvcloudprovider.PyVcloudProvider', 'isPresentCatalog'): face_utilities.unary_unary_inline(servicer.isPresentCatalog),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PyVcloudProvider_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('pyvcloudprovider.PyVcloudProvider', 'CreateCatalog'): Catalog.SerializeToString,
      ('pyvcloudprovider.PyVcloudProvider', 'DeleteCatalog'): Catalog.SerializeToString,
      ('pyvcloudprovider.PyVcloudProvider', 'Login'): TenantCredentials.SerializeToString,
      ('pyvcloudprovider.PyVcloudProvider', 'isPresentCatalog'): Catalog.SerializeToString,
    }
    response_deserializers = {
      ('pyvcloudprovider.PyVcloudProvider', 'CreateCatalog'): CreateCatalogResult.FromString,
      ('pyvcloudprovider.PyVcloudProvider', 'DeleteCatalog'): DeleteCatalogResult.FromString,
      ('pyvcloudprovider.PyVcloudProvider', 'Login'): LoginResult.FromString,
      ('pyvcloudprovider.PyVcloudProvider', 'isPresentCatalog'): IsPresentCatalogResult.FromString,
    }
    cardinalities = {
      'CreateCatalog': cardinality.Cardinality.UNARY_UNARY,
      'DeleteCatalog': cardinality.Cardinality.UNARY_UNARY,
      'Login': cardinality.Cardinality.UNARY_UNARY,
      'isPresentCatalog': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'pyvcloudprovider.PyVcloudProvider', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
